#!/usr/bin/env node
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

// jshint node: true
'use strict';

var nopt = require('nopt');
var vulcan = require('../lib/vulcan');

var help = [
  'vulcanize: Reduce an HTML file and its dependent HTML Imports into one file',
  '',
  'Usage:',
  '  vulcanize <html file>',
  '',
  'Options:',
  '  -h|--help: print this message',
  '  -v|--version: print version number',
  '  -p <arg>|--abspath <arg>: use <arg> as the "webserver root", make all adjusted urls absolute',
  '  --exclude <path>: exclude a subpath from root. Use multiple times to exclude multiple paths. Tags to excluded paths are kept.',
  '  --strip-excludes: Remove tags to external resources.',
  'Examples:',
  '  The command',
  '',
  '    vulcanize target.html',
  '',
  '  will inline the HTML Imports of `target.html` and print the resulting HTML to standard output.',
  '',
  '  The command',
  '',
  '    vulcanize target.html > build.html',
  '',
  '  will inline the HTML Imports of `target.html` and print the result to build.html.',
  '',
  '  The command',
  '',
  '    vulcanize -p "path/to/target/" /target.html',
  '',
  '  will inline the HTML Imports of `target.html`, treat `path/to/target/` as the webroot of target.html, and make all urls absolute to the provided webroot.',
  '',
  '  The command',
  '',
  '    vulcanize --exclude "path/to/target/subpath/" --exclude "path/to/target/subpath2/" target.html',
  '',
  '  will inline the HTML Imports of `target.html` that are not in the directory `path/to/target/subpath` nor `path/to/target/subpath2`.',
  '',
  '  If the `--strip-excludes` flag is used, the HTML Import `<link>` tags that point to resources in `path/totarget/subpath` and `path/to/target/subpath2/` will also be removed.'
].join('\n');

var args = nopt(
  {
    help: Boolean,
    version: Boolean,
    abspath: require('path'),
    exclude: [String, Array],
    'strip-excludes': Boolean
  },
  {
    '-h': ['--help'],
    '-v': ['--version'],
    '-p': ['--abspath']
  }
);

var target = args.argv.remain[0];

function printHelp() {
  console.log(help);
}

var pkg = require('../package.json');
function printVersion() {
  console.log('vulcanize:', pkg.version);
}

if (args.version) {
  printVersion();
  process.exit(0);
}

if (args.help || !target) {
  printHelp();
  process.exit(0);
}

if (args['update-notifier'] !== false) {
  (function() {
    try {
      require('update-notifier')({
        pkg: pkg
      }).notify();
    } catch(_) {}
  })();
}

// escape a regex string and return a new RegExp
function stringToRegExp(str) {
  return new RegExp(str.replace(/[-\/\\*+?.()|[\]{}]/g, '\\$&'));
}

args.excludes = args.exclude ? args.exclude.map(stringToRegExp) : [];
args.stripExcludes = args['strip-excludes'];

vulcan.setOptions(args);
vulcan.process(target, function(err, content) {
  if (err) {
    console.error(err);
    console.error(err.stack);
    process.exit(1);
  }
  console.log(content);
});
